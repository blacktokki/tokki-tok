{"version":3,"sources":["PickerItem.js","Picker.web.js","UnimplementedView.web.js","PickerIOS.web.js","src/components/CommonPicker.tsx"],"names":["Option","props","ReactNativeWeb","Select","forwardRef","forwardedRef","unstable_createElement","ref","Picker","enabled","onValueChange","selectedValue","other","itemStyle","mode","prompt","dropdownIconColor","handleChange","e","target","selectedIndex","value","disabled","undefined","onChange","Item","color","label","testID","style","styles","create","unimplementedView","UnimplementedView","View","children","PickerIOS","_ref","setValue","values","_jsx","flex","fontSize","map","v","i"],"mappings":"oJAoBMA,EAAUC,YAAD,OACbC,IAAsC,SAAUD,I,k3BCWlD,IAAME,EAASC,sBAAW,SAACH,EAAYI,GAAb,OACxBC,YAAuB,SAAD,OACjBL,GAD4B,IAE/BM,IAAKF,QAIHG,EAAsDJ,sBAG1D,SAACH,EAAOI,GACR,IACEI,EAQER,EARFQ,QACAC,EAOET,EAPFS,cACAC,EAMEV,EANFU,cAKGC,GACDX,EALFY,UAKEZ,EAJFa,KAIEb,EAHFc,OAGEd,EAFFe,kBACGJ,IACDX,EATJ,IAWMgB,EAAe,eAClBC,YACC,MAA+BA,EAAEC,OAA1BC,EAAD,EAACA,cAAeC,UAClBX,GACFA,EAAcW,EAAOD,KAGzB,CAACV,IAGH,OAEE,gBAACP,EAAD,GACEmB,UAAsB,IAAZb,QAA2Bc,EACrCC,SAAUP,EACVV,IAAKF,EACLgB,MAAOV,GACHC,OAMVJ,EAAOiB,KDlDQ,YAMQ,IALrBC,EADiC,EACjCA,MACAC,EAFiC,EAEjCA,MACAC,EAHiC,EAGjCA,OACAP,EAJiC,EAIjCA,MAJiC,IAKjCZ,eAAO,OAAG,EAEV,OACE,gBAAC,EAAD,CACEa,UAAsB,IAAZb,QAA2Bc,EACrCM,MAAO,CAACH,SACRE,OAAQA,EACRP,MAAOA,EACPM,MAAOA,GACNA,ICsCQnB,Q,QCpDTsB,E,MAAS,EAAWC,OAAO,CAC/BC,kBAOM,KAGOC,EAnBYhC,YACzB,OACE,gBAACiC,EAAA,EAAD,CAAML,MAAO,CAACC,EAAOE,kBAAmB/B,EAAM4B,QAC3C5B,EAAMkC,WCfb,SAASC,IACP,OAAO,gBAAC,EAAD,MAMTA,EAAUX,KAAOQ,EAEFG,I,QCZA,mBAAAC,GAAsG,IAApGhB,EAAKgB,EAALhB,MAAOiB,EAAQD,EAARC,SAAUC,EAAMF,EAANE,OAC9B,OAAOC,cAAChC,EAAM,CACVqB,MAAO,CAACY,KAAK,GACb5B,UAAW,CAAC6B,SAAS,IACrB/B,cAAeU,EACfX,cAAe4B,EAASH,SACvBI,EAAOI,KAAI,SAACC,EAAGC,GAAC,OAAGL,cAAChC,EAAOiB,KAAI,CAASE,MAAOiB,EAAEjB,MAAON,MAAOuB,EAAEvB,OAA5BwB","file":"static/js/12.487065dc.chunk.js","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport type {ColorValue} from 'react-native/Libraries/StyleSheet/StyleSheet';\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from 'react-native-web';\n\ntype Props = {\n  color?: ColorValue,\n  label: string,\n  testID?: string,\n  enabled?: boolean,\n  value?: number | string,\n};\n\nconst Option = (props: any) =>\n  ReactNativeWeb.unstable_createElement('option', props);\n\n/**\n * PickerItem Component for React Native Web\n * @returns\n */\nexport default function PickerItem({\n  color,\n  label,\n  testID,\n  value,\n  enabled = true,\n}: Props): React.Node {\n  return (\n    <Option\n      disabled={enabled === false ? true : undefined}\n      style={{color}}\n      testID={testID}\n      value={value}\n      label={label}>\n      {label}\n    </Option>\n  );\n}\n","/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport {unstable_createElement} from 'react-native-web';\nimport {forwardRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  unstable_createElement('select', {\n    ...props,\n    ref: forwardedRef,\n  }),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={forwardedRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {View, StyleSheet} from 'react-native';\ndeclare var __DEV__: boolean;\n/**\n * Common implementation for a simple stubbed view. Simply applies the view's styles to the inner\n * View component and renders its children.\n */\nconst UnimplementedView = (props: $FlowFixMeProps): React.Node => {\n  return (\n    <View style={[styles.unimplementedView, props.style]}>\n      {props.children}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  unimplementedView:\n    process.env.NODE_ENV !== 'production'\n      ? {\n          alignSelf: 'flex-start',\n          borderColor: 'red',\n          borderWidth: 1,\n        }\n      : {},\n});\n\nexport default UnimplementedView;\n","/**\n * @flow\n */\n\nimport * as React from 'react';\nimport UnimplementedView from './UnimplementedView';\n\nfunction PickerIOS(): React.Node {\n  return <UnimplementedView />;\n}\n\n/**\n * Fallback for other platforms\n */\nPickerIOS.Item = UnimplementedView;\n\nexport default PickerIOS;\n","import React from 'react'\r\nimport { Picker } from \"@react-native-picker/picker\"\r\n\r\n\r\nexport default ({value, setValue, values}:{value:any, setValue:(v:any)=>void, values:{label:string, value:any}[]})=>{\r\n    return <Picker\r\n        style={{flex:1}}\r\n        itemStyle={{fontSize:20}}\r\n        selectedValue={value}\r\n        onValueChange={setValue}>\r\n        {values.map((v, i)=><Picker.Item key={i} label={v.label} value={v.value} />)}\r\n    </Picker>\r\n}"],"sourceRoot":""}